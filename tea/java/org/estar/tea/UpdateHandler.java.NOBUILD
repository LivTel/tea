package org.estar.tea;

import java.io.*;
import java.util.*;
import java.net.*;
//import javax.net.ssl.*;
//import javax.security.cert.*;
import java.util.*;
import java.text.*;
import javax.net.ssl.*;

import org.estar.astrometry.*;
import org.estar.rtml.*;
import org.estar.io.*;

import ngat.util.*;
import ngat.util.logging.*;
import ngat.phase2.*;
import ngat.net.*;
import ngat.net.camp.*;
import ngat.astrometry.*;

import ngat.message.base.*;
import ngat.message.GUI_RCS.*;
import ngat.message.OSS.*;

/** 
 * Handles observation updates from the RCS. 
 *
 * When the thread is started it will keep looking in its pending list for any
 * new image file names. If any, these should be pulled across and stored in the
 * processing directory. They should then be pipelined and the data extracted and 
 * placed in the update document. 
 *
 */
public class UpdateHandler extends ControlThread implements Logging {
    /**
     * Revision control system version id.
     */
    public final static String RCSID = "$Id: UpdateHandler.java.NOBUILD,v 1.1 2019-01-04 16:44:00 cjm Exp $";

    /** Classname for logging.*/
    public static final String CLASS = "UpdateHandler";
    
    /** Polling interval for pending queue.*/
    private static final long SLEEP_TIME = 5000L;

    /** Polling interval while awaiting first data.*/
    private static final long LONG_SLEEP_TIME = 1800*1000L;
    
    /** Time margin above expected execution time when we give up as a lost cause.*/
    private static final long TIME_MARGIN = 2*3600*1000L;
    
    /** Flags completed successful obs.*/
    public static final int OBS_DONE = 1;

    /** Flags completed but failed obs.*/
    public static final int OBS_FAILED = 2;

    /** Flags uncompleted obs.*/
    public static final int OBS_NOT_DONE_YET = 0;

    /** The TEA.*/
    TelescopeEmbeddedAgent tea;

    /** The update document - temporarily created to send back to remote UA.*/
    private RTMLDocument updateDoc;

    /** Pipeline processing plugin implementation. (#### Should be per project)*/
    private PipelineProcessingPlugin pipelinePlugin = null;

    /** List of pending image filenames to transfer and process 
     * - these are lost between instantiations i.e. non-persistent.
     */
    private List pending;

    /** List of processed image filenames 
     * - dont know what these will be used for 
     * - these are lost between instantiations i.e. non-persistent.
     */
    private List processed;

    /** Flag to indicate whether the observations have completed.*/
    private volatile int state = OBS_NOT_DONE_YET;

 //    /** Number of exposures we expect to get.*/
//     private int numberExposures;
    
//     /** Time we expect this observation/group to take - combination of
//      * number of exposures, exposure time, readout and dprt allowances (ms).
//      */
//     private long expectedTime;
    
//     /** Time we started processing.*/
//     private long startTime;
    
//     /** Records the elapsed processing time.*/
//     private long elapsedTime;

    /** Records the number of exposures received so far.*/
    private int countExposures;

    /** Current sleep setting.*/
    private long sleepTime = LONG_SLEEP_TIME;

  
    /**
     * The logger.
     */
    Logger logger = null;
    
    /** 
     * Create an UpdateHandler. Setup logger. Initialises pending and processed.
     * Figures out which pipeline plugin to use by calling pipelinePlugin.
     * @param tea     The TEA.
     * @param baseDoc The base document.
     * @throws Exception Thrown if an error occurs. i.e. the baseDir deepClone() fails. getPipelinePluginFromDoc
     *                   fails.
     * @see #getPipelinePluginFromDoc
     * @see #tea
     * @see #baseDoc
     * @see #updateDoc
     * @see #pending
     * @see #processed
     * @see #pipelinePlugin
     * @see #logger
     * @see #countExposures
     * @see #elapsedTime
     */
    public UpdateHandler(TelescopeEmbeddedAgent tea) throws Exception {

	    super("UH", true);
	    this.tea     = tea;
	    this.arq     = arq;
	    this.baseDoc = baseDoc;
	    
	    pending   = new Vector();
	    processed = new Vector();

	    logger = LogManager.getLogger(this);

	    updateDoc = (RTMLDocument)baseDoc.deepClone();
	    pipelinePlugin = getPipelinePluginFromDoc();
	    pipelinePlugin.setTea(tea);
	    pipelinePlugin.initialise();
	    countExposures = 0;
	    elapsedTime = 0L;

	}

   
    /** Sets flag to indicate that observation has FAILED.
     * ###This is also used to knock the UH into LONG_SLEEP.
     */
    public void setObservationFailed() { 
	this.state = OBS_FAILED; 
	sleepTime = LONG_SLEEP_TIME;
    }
    
    /** Sets flag to indicate that observation has SUCCEDED.
     * ###This is also used to knock the UH into LONG_SLEEP.
     */
    public void setObservationCompleted() { 
	this.state = OBS_DONE;
	sleepTime = LONG_SLEEP_TIME;
    }
    
    /** Adds the name of a file to the pending list.
     * ###This is also used to knock the UH into SHORT_SLEEP.     
     * @param fileName The full (path) name of the file on the OCC 
     *                 including instrument NFS mount details.
     */
    public void addImageFileName(String fileName) {
	pending.add(fileName);
	sleepTime = SLEEP_TIME; // short period now
    }
    
    // Called when UH is started.*/
    protected void initialise() {
	startTime = System.currentTimeMillis();
    }

    /**
     * Uses the baseDoc to figure out which project this document belong to.
     * Then tries to create the a suitable pipeline processing plugin.
     * @return A new instance of a class implementing PipelineProcessingPlugin, suitable for this data.
     * @exception NullPointerException Thrown if baseDoc is null.
     * @exception ClassNotFoundException Thrown if the specified class does not exist.
     * @exception InstantiationException Thrown if an instance of the class cannot be created.
     * @exception IllegalAccessException Thrown if an instance of the class cannot be created.
     * @see #baseDoc
     */
    protected PipelineProcessingPlugin getPipelinePluginFromDoc() 
	throws NullPointerException, 
	       ClassNotFoundException, InstantiationException, IllegalAccessException
    {
	RTMLContact contact = null;
	RTMLProject project = null;
	String userId = null;
	String proposalId = null;
	String pipelinePluginClassname = null;
	Class pipelinePluginClass = null;
	String key = null;
	
	logger.log(INFO, 1, CLASS, tea.getId(),"getPipelinePluginFromDoc","UH:: Started.");
	if(baseDoc == null)
	    {
		throw new NullPointerException(this.getClass().getName()+
					       ":getPipelinePluginFromDoc:base document was null.");
	    }
	// get userId
	contact = baseDoc.getContact();
	if(contact == null)
	    {
		throw new NullPointerException(this.getClass().getName()+
					       ":getPipelinePluginFromDoc:Contact was null for document.");
	    }
	userId = contact.getUser();
	// get proposalId
	project = baseDoc.getProject();
	if(project == null)
	    {
		throw new NullPointerException(this.getClass().getName()+
					       ":getPipelinePluginFromDoc:Project was null for document.");
	    }
	proposalId = project.getProject();
	// get pipeline plugin class name
	key = new String("pipeline.plugin.classname."+userId+"."+proposalId);
	logger.log(INFO, 1, CLASS, tea.getId(),"getPipelinePluginFromDoc",
		   "UH:: Trying to get pipeline classname using key "+key+".");
	pipelinePluginClassname = tea.getPropertyString(key);
	if(pipelinePluginClassname == null)
	    {
		logger.log(INFO, 1, CLASS, tea.getId(),"getPipelinePluginFromDoc",
			   "UH:: Project specific pipeline does not exist, "+
			   "trying default pipeline.plugin.classname.default.");
		pipelinePluginClassname = tea.getPropertyString("pipeline.plugin.classname.default");
	    }
	logger.log(INFO, 1, CLASS, tea.getId(),"getPipelinePluginFromDoc",
		   "UH:: Pipeline classname found was "+pipelinePluginClassname+".");
	// if we could not find a class name to instansiate, fail.
	if(pipelinePluginClassname == null)
	    {
		throw new NullPointerException(this.getClass().getName()+
					       ":getPipelinePluginFromDoc:Pipeline classname found was null.");
	    }
	// get pipeline plugin class from class name
	pipelinePluginClass = Class.forName(pipelinePluginClassname);
	// get pipeline plugin instance from class
	return  (PipelineProcessingPlugin)(pipelinePluginClass.newInstance());
    }
    
    /** 
     * Called by wrapping thread forever until terminated.
     * This thread should only terminate when the ARQ itself is deregistered and destroyed,
     * which indicates that one or more of:-
     * <ul>
     *   <li> Group's End Date has been exceeded by a generous margin.
     *       (this function is currently performed by the DocumentExpirator).
     *   <li> #numberExposures > expected number.
     * </ul>
     */
    protected void mainTask() {
    
	//System.err.println("UH polling start maintask");
	
	RTMLImageData imageData = null;
		
	// Always clear out the pending list.
		    
	// If image filenames in queue, grab and process.
	while (! pending.isEmpty()) {
	    
	    String imageFileName = (String)pending.remove(0);
	    
	    logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
		       "UH::Processing image filename "+imageFileName+" for "+observationId+".");
	    
	    // Generate the correct destination file name.			
	    String destDirName = null;
	    try {
		destDirName = pipelinePlugin.getInputDirectory();
	    }
	    catch(Exception e) {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Getting input directory failed for pipeline plugin "
			   +pipelinePlugin+":"+e);
		logger.dumpStack(1,e);
		return;
	    }

	    File   destDir     = new File(destDirName);
	    File   fullFile    = new File(imageFileName);
	    String rawFileName = fullFile.getName();
	    File   destFile    = new File(destDir, rawFileName);
	    String destFileName= destFile.getPath();	
		
	    // Grab image from OCC/ICC.
	    try {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Transferring image filename "+
			   imageFileName+" to "+destFileName+" for "+observationId+".");
		transfer(imageFileName, destFileName);		    
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Transfered image okay");
	    } catch (Exception e) {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Transferring image filename "+
			   imageFileName+" to "+destFileName+" failed for "+
			   observationId+":"+e);
		logger.dumpStack(1,e);
		return;
	    }
	    
	    // Pipeline process
	    try {
		imageData = pipelinePlugin.processFile(destFile);
	    } catch(Exception e) {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::pipelinePlugin.processFile "+
			   destFile+" failed:"+e);
		logger.dumpStack(1,e);
		return;
	    }
	    
	    // Add processed data to basedoc
	    RTMLObservation obs = baseDoc.getObservation(0);
	    if (obs != null) {
		try {
		    obs.addImageData(imageData);
		} catch (Exception e) {
		    logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			       "UH::addImageData "+
			       imageData+" failed:"+e);
		    logger.dumpStack(1,e);
		    return;
		}
	    }
		
	    // Save the modified base document.
	    try {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Saving document for "+observationId+".");
		tea.saveDocument(baseDoc, arq.getDocumentFile());
	    } catch (Exception e) {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::saveDocument for "+observationId+" failed:"+e);
		logger.dumpStack(1,e);
		return;
	    }
	    
	    
	    // Add processed data to updatedoc. 
	    // Note we re-use the same UpdateDoc that got cloned from the BaseDoc 
	    // at the start - we need to clear out any added image data each time we re-use it.
	    obs = updateDoc.getObservation(0);
	    if (obs != null) {
		try {
		    // clear any left-over image data. 
		    obs.clearImageDataList();
		    // add just-received reduced image data.
		    obs.addImageData(imageData);
		} catch (Exception e) {
		    logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			       "UH::addImageData for "+observationId+" "+
			       imageData+" failed:"+e);
		    logger.dumpStack(1,e);
		    return;
		}
	    }
		
	    // Now try to send the update to the UA.
	    // this is a mess - need global comms method like
	    // tea.sendDoc(doc); This may need to go in athread
	    // as it may block for a while if the connection is blocked
	    try {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Sending update document for "+observationId+".");
		arq.sendDocUpdate(updateDoc, "update");
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Sent update document for "+observationId+".");
	    } catch (Exception e) {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::sendDocUpdate failed for "+observationId+":"+e);
		logger.dumpStack(1,e);
		return;
	    }
	    
	    // Add to list of processed filenames.
	    processed.add(imageFileName);
	    
	} // while pending list not empty
	
	
	// Finally quit
	//if (state == OBS_DONE)
	//  {
	//logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
	//	   "UH::state is now OBS_DONE:terminating for "+observationId+".");
	    //terminate();
	    //return;
	    //  }
	
	// who cares ?
	elapsedTime = System.currentTimeMillis() - startTime;
	
	    // Quit if weve overrun horribly
	    //if (elapsedTime > expectedTime + TIME_MARGIN)
	    //{
	    //    logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
	    ///	       "UH::Ran out of time to complete ("+elapsedTime+" > "+(expectedTime+TIME_MARGIN)+
	    //	       "): but NOT terminating for "+observationId+".");
	    //    //terminate();
	    //    return;
	    //}
	    
	    // Now we should do the test to see if weve got all the expected images or 
	    // run out of time (EndDate)..


	    // Back round once more at least.	    
	try {Thread.sleep(sleepTime);} catch (InterruptedException ix) {}
	    
    }
    
    /** Called at end-of-run.
     * Nothing to do here now...
     */
    protected void shutdown() {
	
    }

    /**
     * ### THIS CODE needs calling from the maintask to test each time round
     * ### after the pending list is cleared out.
     */
    protected void testCompletion() {
	int multrunExposureCount = 0;

	// if no series constraint present, default to 1 set of multruns (flexibly scheduled)
	int seriesConstraintCount = 1;
	int imageDataCount = 0;
	
	logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
		   "UH::Shutdown for this handler for "+observationId+".");
	
	// if we have completed the number of observations requested by the UA,
	// send a complete.
	// This should only fire on the last UpdateHandler created for a particular MonitorGroup
	// if <SeriesConstraint><Count> accurately reflects (end date - start_date) / period.
	// If a MonitorGroup, we expect <SeriesConstraint><Count>* <Exposure><Count> frames, if a MonitorGroup.
	// If a FlexibleGroup, we expect <Exposure><Count> frames. 
	RTMLObservation observation = baseDoc.getObservation(0);
	
	if(observation != null) {
	    
	    RTMLSchedule schedule = observation.getSchedule();
	    
	    if(schedule != null) {
		
		multrunExposureCount = schedule.getExposureCount();
		RTMLSeriesConstraint seriesConstraint = schedule.getSeriesConstraint();
		
		if(seriesConstraint != null) {
		    // ### what does this have for FGs - they may not have been set,
		    // ### we just assume 1 in the obs.
		    seriesConstraintCount = seriesConstraint.getCount();
		    // Note should really check :
		    // (schedule.getEndDate() - schedule.getStartDate())/
		    // seriesConstraint.getInterval() 
		    // does not give a number less than seriesConstraintCount, in which
		    // case it is unlikely seriesConstraintCount monitor period will occur before 
		    // the document expires,
		    // or it does not give a number greater than seriesConstraintCount,
		    // in which case we may provide more data than the UA has asked for.
		}
	    }
	    
	    imageDataCount = observation.getImageDataCount();
	    
	}
	
	logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
		   "UH::Testing whether image data count "+imageDataCount+
		   " is greater than expected number of images "+
		   (multrunExposureCount*seriesConstraintCount)+" for "+observationId+".");
	
	// At this point we have the following:
	// multrunExposureCount  == obs.getNumRuns()
	// imageDataCount        == No of images we processed.
	// seriesConstraintCount == Requested no of monitor windows (FG deduced as 1)
	//
      
	if(imageDataCount >= (multrunExposureCount*seriesConstraintCount)) {
		
	    // Deregister immediately.
	    tea.deleteUpdateHandler(observationId);

	    // we have done at least as many frames as the UA expects
	    try {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Sending observation complete document for "+observationId+".");
		// send "observation" type document to complete
		arq.sendDocUpdate(baseDoc, "observation");
		
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Saving observation complete document for "+observationId+".");
		
		// save document - pass the filename aswell
		tea.saveDocument(baseDoc, arq.getDocumentFile());
		
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Deleting observation complete document for "+observationId+
			   " (to expired directory).");
		// move document to expired dir
		// delete document from memory
		arq.expireDocument();

		// ####Need to sort out the sequence here- e.g. ARQ terminates UH on diposal.
		// probably delete the registeration first to prevent spurious extra updates!
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
			   "UH::Deleting ARQ and UH thread for "+observationId+".");

		// moved up... tea.deleteUpdateHandler(observationId);

		// Terminate this thread...
		// terminate();

	    } 
	    catch (Exception e) {
		logger.log(INFO, 1, CLASS, tea.getId(),"mainTask",
		   "UH::sendDocUpdate failed:"+e);
		logger.dumpStack(1,e);
		return;
	    }
	}
     
    } // [testCompletion]
    
    /**
     * Tries to pull an image file off the OCC and stick it in the appropriate directory.
     * @param imageFileName The remote filename path.
     * @param destFileName The local filename path to store the copied file into.
     * @exception Exception Thrown if the transfer failed.
     * @see #client
     * @see #logger
     */
    private void transfer(String imageFileName, String destFileName) throws Exception
    {
	
	SSLFileTransfer.Client client = tea.getImageTransferClient();
	
	if (client == null) 
	    throw new Exception("The transfer client is not available");
	
	logger.log(INFO, 1, CLASS, tea.getId(),"transfer",
		   "UH::Requesting image file: "+imageFileName+" -> "+destFileName);
	
	client.request(imageFileName, destFileName);
	
    }
}
//
// $Log: not supported by cvs2svn $
// Revision 1.9  2005/05/27 14:00:42  snf
// Moved shutdown() code to testCompletion() to be called by mainTask(). Needs more work.
//
// Revision 1.8  2005/05/25 14:26:56  snf
// Tidying up and adding extra comments.
//
// Revision 1.7  2005/05/25 11:15:44  cjm
// Now create logger before calling getPipelinePluginFromDoc in connstrcutor,
// as getPipelinePluginFromDoc uses logger.
//
// Revision 1.6  2005/05/23 16:10:00  cjm
// Added initial pipeline plugin implmentation.
//
// Revision 1.5  2005/05/19 12:55:56  cjm
// Added FITS header handling methods.
//
// Revision 1.4  2005/05/12 16:27:15  cjm
// Changed when clearImageDataList was called, so update document contain 1 frame only.
// Added lots of logging.
//
// Revision 1.3  2005/05/11 19:21:41  cjm
// Rewritten to support one update document per frame.
// Also can produce multiple update documents per instance, if new images for one group
// appear quicker than update documents can be sent out (due to data transfer etc)...
//
//
